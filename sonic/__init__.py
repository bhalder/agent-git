from sonic.adl.types import (
    AgentDescription,
    TypeDescription,
    OutputType,
)
from sonic.adl.agent import Agent
from sonic.utils.logger import LOG
from sonic.utils.git.helper import GitHelper
from sonic.utils.genai.agents import Base
from pydantic import BaseModel
import json
from uuid import uuid4
from IPython.display import display, HTML, clear_output


def style_text(text, color="black", size="16px", weight="normal"):
    """Helper function to style text with HTML."""
    return f"<p style='color: {color}; font-size: {size}; font-weight: {weight};'>{text}</p>"


class ImprovedSystemPrompt(BaseModel):
    prompt: str


IMPROVEMENT_AGENT_PROMPTS = """
You are a specialized agent that helps improve the quality of the system prompt based on user feedback
and the generated output. You are expected to provide a new system prompt that is more informative and
"""


class Example(BaseModel):
    example: str


class App:

    def __init__(
        self,
        project_name: str,
        access_token: str,
        repo_name: str,
        system_message: str = "",
    ):
        LOG.info("Initializing the app.")
        if not access_token:
            raise ValueError("Access token is required to use the app.")

        if not repo_name:
            raise ValueError("Repository name is required to use the app.")

        self.git_helper = GitHelper(access_token, repo_name)
        self.project_name = project_name
        self.example_generator = Base(
            name="example_generator",
            system_message="You are an example generator, based on user prompt you return a string example of what the user has asked to generate. Always only generate one example at a time.",
            user_message="{text}",
            output_format=Example,
        )

        self.improvement_agent = Base(
            name="improvement_agent",
            system_message=IMPROVEMENT_AGENT_PROMPTS,
            output_format=ImprovedSystemPrompt,
            user_message="Original Prompt: {prompt}, input: {input}, generated_out: {output}, user_feedback: {feedback}",
        )

        self.agent_system_message = system_message
        self.guardrails = []
        self.adl = AgentDescription(
            name="agent",
            system_message=self.agent_system_message,
            user_message="{text}",
            inputs={},
            outputs={
                "response": TypeDescription(
                    type=OutputType.STRING,
                    description="The response generated by the agent.",
                    default="",
                )
            },
            guardrails=self.guardrails,
            example_generator="",
        )

        self.agent = Agent(self.adl)
        self.examples = {}

    def create_project(self):
        self.git_helper.create_project(self.project_name)

    def commit(self, commit_message: str):
        d = self.adl.to_dict()
        self.git_helper.commit(self.project_name, commit_message, json.dumps(d, indent=4))  # type: ignore

    def generate_example(self, prompt: str) -> str:
        self.example_generator_prompt = prompt
        result: Example = self.example_generator.run(text=self.example_generator_prompt)  # type: ignore
        self.examples[str(uuid4())] = result.example
        return result.example

    def commit_examples(self, commit_message: str):
        d = self.examples
        if self.project_name:
            self.git_helper.commit(
                self.project_name,
                commit_message,
                json.dumps(d, indent=4),
                "examples.json",
            )
        else:
            raise ValueError("Project name is required to commit examples.")

    def run(self, **kwargs) -> str:
        result = self.agent.run(**kwargs)
        return result

    def improve(self, input: str, output: str, feedback) -> str:
        result = self.improvement_agent.run(
            prompt=self.adl.system_message,
            input=input,
            output=output,
            feedback=feedback,
        )

        self.adl.system_message = result.prompt
        self.agent.update_system_message(result.prompt)
        LOG.info(f"New system prompt: {result.prompt}")
        return result.prompt

    def loop(self):
        while True:
            clear_output(wait=True)  # Clears the output area in the notebook
            display(
                HTML(
                    style_text(
                        "Welcome to the Agent Interaction Console!",
                        size="20px",
                        weight="bold",
                    )
                )
            )
            display(HTML(style_text("1. Enter a new example", color="blue")))
            display(HTML(style_text("2. Generate an example", color="blue")))
            display(HTML(style_text("3. Exit", color="blue")))

            choice = input("\nChoose an option (1, 2, or 3): ")

            if choice == "1":
                example = input("\nEnter your example text: ")
                self.examples[str(uuid4())] = example
            elif choice == "2":
                example_prompt = input("\nEnter prompt for generating example: ")
                example = self.generate_example(example_prompt)
                display(
                    HTML(style_text(f"Generated example: {example}", color="green"))
                )
            elif choice == "3":
                display(
                    HTML(
                        style_text(
                            "Thank you for using the system. Exiting...", color="red"
                        )
                    )
                )
                break
            else:
                display(
                    HTML(style_text("Invalid choice, please try again.", color="red"))
                )
                continue

            output = self.run(text=example)
            display(HTML(style_text(f"System output: {output}", color="purple")))
            feedback = input("\nEnter your feedback on the output: ")
            self.improve(example, output, feedback)
            display(
                HTML(
                    style_text(
                        f"Updated system prompt: {self.adl.system_message}",
                        color="orange",
                    )
                )
            )

            save_commit = input(
                "\nWould you like to save and commit the examples? (Yes/No): "
            )
            if save_commit.lower() == "yes":
                self.create_project()
                self.commit_examples("Added new examples")
                self.commit("Updated system prompt after feedback")
                display(
                    HTML(style_text("Changes committed successfully.", color="green"))
                )
            elif save_commit.lower() == "no":
                display(
                    HTML(
                        style_text("Proceeding without saving changes.", color="orange")
                    )
                )
            else:
                display(
                    HTML(style_text("Invalid choice, please try again.", color="red"))
                )
